# -*- coding: utf-8 -*-
"""SAMCL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TeZt-Y4N4yPAwltZRHy8PzYmQNaChxKa
"""

import torch
import torch.nn as nn
import numpy as np
import torch.optim as opti
from torch.utils.data import DataLoader
from copy import deepcopy
from torch.nn import functional as F
from tqdm.notebook import tqdm
from torchvision import transforms
from torchvision.models import resnet18
from pyhessian import hessian
from utils import *
from nngeometry.metrics import FIM
from nngeometry.object import PMatKFAC, PMatDiag, PVector
from continuum.datasets import CIFAR10
from continuum.datasets import MNIST
from continuum import ClassIncremental
from continuum import InstanceIncremental
from continuum.datasets import PyTorchDataset
import torchvision
from nngeometry.object import PMatDense
import torchvision.models as models
import torch.nn.init as init

if torch.cuda.is_available():
    device = torch.device("cuda")
    print("GPU is available")
else:
    device = torch.device("cpu")
    print("GPU is not available")

import random
def set_seed(seed):
    torch.manual_seed(seed)
    np.random.seed(seed)
    random.seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)
        torch.backends.cudnn.deterministic = True
        torch.backends.cudnn.benchmark = False

set_seed(1)

def Update(model, inputs, labels, criterion, lr, WD, r, alpha, FisherList, v_List, G_List, Lambda):
    model.zero_grad()
    v = getParameter(model)
    v_Now = PVector.from_model(model).clone().detach()

    #obtain the first gradient
    outputs = model(inputs)
    Loss = criterion(outputs, labels)
    Loss.backward()
    Grad1 = getGrad(model)


    #obtain the second gradient
    N_Grad1 = F.normalize(Grad1, p=2, dim=0)
    model = LoadParameter( model, (v + (r * N_Grad1)) )
    model.zero_grad()
    outputs = model(inputs)
    Loss = criterion(outputs, labels)
    Loss.backward()
    Grad2 = getGrad(model)



    norm_avg = 0
    #obtain the gradient of the old tasks
    Grad4 = torch.zeros(len(v)).to(device)
    if(len(FisherList)>0):
         for i in range(len(FisherList)):
             Temp = G_List[i].get_flat_representation() + Lambda * ((FisherList[i].mv(v_Now)).get_flat_representation() - (FisherList[i].mv(v_List[i])).get_flat_representation())
             #Temp = Lambda * ((FisherList[i].mv(v_Now)).get_flat_representation() - (FisherList[i].mv(v_List[len(v_List)-1])).get_flat_representation())
             Temp_Norm = torch.norm(Temp, p = 2).item()
             New_Temp =  (1/Temp_Norm) * (FisherList[i].mv(G_List[i]).get_flat_representation() + Lambda * (FisherList[i].mv((FisherList[i].mv(v_Now))).get_flat_representation() - FisherList[i].mv((FisherList[i].mv(v_List[i]))).get_flat_representation()))
             #New_Temp = (Lambda**2) * (1/Temp_Norm) * (FisherList[i].mv((FisherList[i].mv(v_Now))).get_flat_representation() - FisherList[i].mv((FisherList[i].mv(v_List[len(v_List)-1]))).get_flat_representation())
             Grad4 = Grad4 +  Temp + ((r * alpha) * New_Temp)
             norm_avg = norm_avg + Temp_Norm
         norm_avg = norm_avg/len(FisherList)

    #obtain the final gradient
    Grad = ((1-alpha) * Grad1) + (alpha * Grad2) + Grad4


    #Update the model
    new_v = v - (lr * (Grad + (WD * v)))
    model = LoadParameter(model, new_v)
    model.zero_grad()

    return model, norm_avg


def storeInfo(model, taskset):
    TempLoader = DataLoader(deepcopy(taskset), batch_size=len(taskset), shuffle=False, num_workers=2)
    F_kfac = FIM(model=model,
                          loader=TempLoader,
                          representation = PMatKFAC,
                          n_output=10,
                          variant='classif_logits',
                          device='cuda')
    v_Last = PVector.from_model(model).clone().detach()

    model.zero_grad()
    for inputs, labels, t in TempLoader:
         outputs = model(inputs.to(device))
         Loss = criterion(outputs, labels.to(device))
         Loss.backward()
         G_Last = PVector.from_model_grad(model).clone().detach()

    model.zero_grad()
    return F_kfac, v_Last, G_Last

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, 3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(32, 64, 3, padding=1)
        self.fc1 = nn.Linear(64 * 8 * 8, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = self.pool(nn.functional.relu(self.conv1(x)))
        x = self.pool(nn.functional.relu(self.conv2(x)))
        x = x.view(-1, 64 * 8 * 8)
        x = nn.functional.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Train set
Trainset = CIFAR10(data_path="./data", download=True, train=True)
scenario1 = ClassIncremental(Trainset, increment=2)

#Test set
Testset = CIFAR10(data_path="./data", download=True, train=False)
scenario2 = ClassIncremental(Testset, increment=2)

def SAM_CL(model, BS, lr, WD, r, alpha, Lambda, criterion, scenario1, scenario2, epoch):
   BS = 16
   G = []
   G_AVG = []
   FisherList = []
   v_List = []
   G_List = []
   A = 0

   Acc_L = []
   Acc_Train = []
   Bests = []

   F = []

   for task_id, taskset in enumerate(scenario1):
        model.train()
        print(f"Number of Past Tasks: {len(FisherList)}, Current Task ID: {task_id},  Number of Samples: {len(taskset)}")
        trainLoader = DataLoader(deepcopy(taskset), batch_size = BS, shuffle=True, num_workers=2)
        if(task_id == 4):
            epoch = 50
        for E in range(epoch):
            G = []
            G_AVG = []
            for inputs, labels, t in trainLoader:
                  model,  norm_avg = Update(model, inputs.to(device), labels.to(device), criterion, lr, WD, r, alpha, FisherList, v_List, G_List, Lambda)
                  G.append(Grad_Monitor(model, inputs.to(device), labels.to(device), criterion))
                  G_AVG.append(norm_avg)

            #Print the Gradient Norm and the distance
            G_New = np.mean(G)
            G_old = np.mean(G_AVG)
            if(task_id == 0):
                 print(f"Task: {task_id}, Epoch: {E}, Grad_New: {G_New}" )
            else:
                 print(f"Task: {task_id}, Epoch: {E}, Grad_New: {G_New}, Grad_Old: {G_old}")

            if(task_id == 4):
                  Temp =  Acc(scenario2, model, task_id)
                  if(Temp >= A):
                        A = Temp
                        Temp_v = PVector.from_model(model).clone().detach()
                        print(f"A : {A}")

        if(task_id == 4):
              Temp_v.copy_to_model(model)


        #Test the Accuracy
        Acc_L.append(Acc(scenario2, model, task_id))
        Acc_Train.append(Acc(scenario1, model, task_id))
        Bests = Bests_Update(scenario1, model, task_id, Bests)

        accuracies = Accuraccies(scenario1, model, task_id)
        F.append(singleAcc(taskset, model, task_id))
        print(f"Bests: {Bests}")
        print(f"Accuracies: {accuracies}")
        print(f"Plasticity: {F[len(F)-1]}")


        #store old information
        Fisher, v_Last, G_Last = storeInfo(model, taskset)
        FisherList.append(Fisher)
        v_List.append(v_Last)
        G_List.append(G_Last)

        if(task_id == 4):
             AAA_Test = (1/len(Acc_L)) * np.sum(Acc_L)
             print(f"AAA_Test: {AAA_Test}")
             AAA_Train = (1/len(Acc_Train)) * np.sum(Acc_Train)
             print(f"AAA_Train: {AAA_Train}")
             FM(scenario1, model, Bests)

             PM = (1/len(F)) * np.sum(F)
             print(f"PM :{PM}")

print("SAM_CL")
model = Net()
model = model.to(device)
criterion = nn.CrossEntropyLoss()
SAM_CL(model, BS=16, lr = 0.000025, WD = 0, r = 0.04, alpha=0.6, Lambda=120, criterion, scenario1, scenario2, epoch = 50)