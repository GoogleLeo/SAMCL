# -*- coding: utf-8 -*-
"""VCL2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10L2gtUNz6MHGgHRkrlwJB0P2RxTLrpTS
"""

import torch
import torch.nn as nn
import numpy as np
import torch.optim as opti
from torch.utils.data import DataLoader
from copy import deepcopy
from torch.nn import functional as F
from tqdm.notebook import tqdm
from torchvision import transforms
from torchvision.models import resnet18
from pyhessian import hessian
from utils import *
from nngeometry.metrics import FIM
from nngeometry.object import PMatKFAC, PMatDiag, PVector
from continuum.datasets import CIFAR10
from continuum.datasets import MNIST
from continuum import ClassIncremental
from continuum import InstanceIncremental
from continuum.datasets import PyTorchDataset
import torchvision
from nngeometry.object import PMatDense
import torchvision.models as models
import torch.nn.init as init

if torch.cuda.is_available():
    device = torch.device("cuda")
    print("GPU is available")
else:
    device = torch.device("cpu")
    print("GPU is not available")

import random
def set_seed(seed):
    torch.manual_seed(seed)
    np.random.seed(seed)
    random.seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)
        torch.backends.cudnn.deterministic = True
        torch.backends.cudnn.benchmark = False

set_seed(1)

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, 3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(32, 64, 3, padding=1)
        self.fc1 = nn.Linear(64 * 8 * 8, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = self.pool(nn.functional.relu(self.conv1(x)))
        x = self.pool(nn.functional.relu(self.conv2(x)))
        x = x.view(-1, 64 * 8 * 8)
        x = nn.functional.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Train set
Trainset = CIFAR10(data_path="./data", download=True, train=True)
scenario1 = ClassIncremental(Trainset, increment=2)

#Test set
Testset = CIFAR10(data_path="./data", download=True, train=False)
scenario2 = ClassIncremental(Testset, increment=2)

class VCL(nn.Module):
    def __init__(self):
        super(VCL, self).__init__()
        self.network = Net()
        self.variational_layers = ['conv1', 'conv2', 'fc1', 'fc2']

        # Variational parameters
        self.log_vars = {
            'conv1': nn.Parameter(torch.full_like(self.network.conv1.weight, np.log(10)).to(device)),
            'conv2': nn.Parameter(torch.full_like(self.network.conv2.weight, np.log(10)).to(device)),
            'fc1': nn.Parameter(torch.full_like(self.network.fc1.weight, np.log(10)).to(device)),
            'fc2': nn.Parameter(torch.full_like(self.network.fc2.weight, np.log(10)).to(device))
        }
        self.prior_means = {}
        self.prior_logvars = {}
        self.init_prior()


    def init_prior(self):
        for layer_name in self.variational_layers:
            layer = getattr(self.network, layer_name)
            self.prior_means[layer_name] = torch.zeros_like(layer.weight).to(device)
            self.prior_logvars[layer_name] = torch.full_like(layer.weight, np.log(10)).to(device)


    def forward(self, x):
        return self.network(x)


    def compute_kl_divergence(self):
        kl_div = 0
        for layer_name in self.variational_layers:
            layer = getattr(self.network, layer_name)
            log_var = self.log_vars[layer_name]
            prior_mean = self.prior_means[layer_name]
            prior_logvar = self.prior_logvars[layer_name]

            mean = layer.weight
            kl_div += 0.5 * torch.sum(prior_logvar - log_var + (torch.exp(log_var) + (mean - prior_mean) ** 2) / torch.exp(prior_logvar) - 1).to(device)
        return kl_div


    def update_prior(self):
        for layer_name in self.variational_layers:
            layer = getattr(self.network, layer_name)
            self.prior_means[layer_name] = layer.weight.clone()
            self.prior_logvars[layer_name] = self.log_vars[layer_name].clone()

def VCL_Train(model, BS, optimizer, criterion, scenario1, scenario2, Lambda, epoch):
   model.train()
   for task_id, taskset in enumerate(scenario1):
      trainLoader = DataLoader(deepcopy(taskset), batch_size=BS, shuffle=True, num_workers=2)
      for E in range(epoch):
            for inputs, labels, t in trainLoader:
                 #Zero the parameter gradients
                 optimizer.zero_grad()

                 #Forward pass
                 outputs = model(inputs.to(device))

                 #Calculate the loss
                 Loss =  criterion(outputs, labels.to(device))

                 if(task_id == 0):
                     Loss = Loss + model.compute_kl_divergence()
                 else:
                     Loss = Loss + (Lambda * model.compute_kl_divergence())

                 #Train
                 Loss = Loss.to(device)
                 Loss.backward()
                 optimizer.step()

      model.update_prior()
      if(task_id == 4):
           return Final_Test(scenario2, model)

print("VCL")
A = []
for i in range(10):
    model = VCL()
    model = model.to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(model.parameters(), lr=0.0001)
    A.append(VCL_Train(model, BS=16, optimizer, criterion, scenario1, scenario2, Lambda=120, epoch=50))
    print(f"Round: {i}, A: {A[i]}")

A = np.array(A)
print(A.mean())
print(A.std())
